from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters

import telegram_calendar
import support_functions


last_inlines = {}
to_del_messages = {}


def change_tg_menu(tg_id, new_type, con, cur):
    inquiry = f"""UPDATE accounts
    SET tg_menu = {new_type}
        WHERE tg_id = '{tg_id}'"""
    cur.execute(inquiry)
    con.commit()


def add_person_to_list(tg_id):
    if tg_id not in to_del_messages:
        to_del_messages[tg_id] = []


async def check_is_baned(update: Update, context: CallbackContext, con, cur, person_date):
    if person_date[8]:
        text = "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"
        await update.message.reply_text(text)
        return True
    return False


async def menu_0_get(update: Update, context: CallbackContext, con, cur, person_date):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Å–∞–∂."

    await update.message.reply_text(text)


async def menu_1_take(update: Update, context: CallbackContext, con, cur, person_date):
    text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Å–∞–∂.
–ö–∞–∫ –≤–∞—Å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏?\n–≠—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"""

    keyboard = [
        [person_date[2]],
        ['–û –ø—Ä–æ–µ–∫—Ç–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)
    change_tg_menu(person_date[1], 1, con, cur)


async def menu_1_get(update: Update, context: CallbackContext, con, cur, person_date):
    answer = update.message.text

    if answer == '–û –ø—Ä–æ–µ–∫—Ç–µ':
        text = "–¢—É—Ç –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ).\n\n–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å."
        keyboard = [
            [person_date[2]],
            ['–û –ø—Ä–æ–µ–∫—Ç–µ']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
        return
    new_name = answer
    new_name.replace('"', '')
    new_name.replace("'", '')

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    inquiry = f"""UPDATE accounts
            SET name = '{new_name}'
                WHERE tg_id = {person_date[1]}"""
    cur.execute(inquiry)
    con.commit()
    await menu_2_take(update, context, con, cur, person_date)
    change_tg_menu(person_date[1], 2, con, cur)


async def menu_2_take(update: Update, context: CallbackContext, con, cur, person_date):
    text = '–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–± –º—ã –º–æ–≥–ª–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å'
    keyboard = [
        [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        ['–ü–æ–∫–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(text, reply_markup=reply_markup)


async def menu_2_get(update: Update, context: CallbackContext, con, cur, person_date):
    text = "–°–ø–∞—Å–∏–±–æ, –Ω–∞ —ç—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"

    if update.message.contact or update.message.text.isdigit():
        if update.message.contact:
            phone_number = update.message.contact.phone_number
        else:
            phone_number = update.message.text
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        inquiry = f"""UPDATE accounts
                    SET phone_number = '{phone_number}'
                        WHERE tg_id = {person_date[1]}"""
        cur.execute(inquiry)
        con.commit()
    else:
        text = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é..."

    await update.message.reply_text(text)
    change_tg_menu(person_date[1], 3, con, cur)
    await menu_3_main_menu(update, context, con, cur, person_date)


# ============================================================================================================


async def menu_11_take(update: Update, context: CallbackContext, con, cur, person_date, message_id=None):
    text = "–ö–∞–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?"

    keyboard = [
        [InlineKeyboardButton("–ò–º—è", callback_data='user_name')],
        [InlineKeyboardButton("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='phone_number')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id:
        await context.bot.edit_message_text(text=text,
                                            chat_id=person_date[1],
                                            reply_markup=reply_markup,
                                            message_id=message_id)
        last_inlines[person_date[1]] = message_id
    else:
        message = await update.message.reply_text(text, reply_markup=reply_markup)
        last_inlines[person_date[1]] = message.message_id


async def menu_11_get(update: Update, context: CallbackContext, con, cur, person_date):
    query = update.callback_query
    await query.answer()

    if query.data == 'cancel':
        change_tg_menu(person_date[1], 3, con, cur)
        await menu_3_main_menu(update.callback_query, context, con, cur, person_date)
        await query.edit_message_text(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

    if query.data == 'user_name':
        await menu_12_take(update, context, con, cur, person_date)
        change_tg_menu(person_date[1], 12, con, cur)

    if query.data == 'phone_number':
        await menu_13_take(update, context, con, cur, person_date)
        change_tg_menu(person_date[1], 13, con, cur)


async def menu_12_take(update: Update, context: CallbackContext, con, cur, person_date):
    text = "–ö–∞–∫ –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, —á—Ç–æ–± –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –∫—Ç–æ –≤—ã?"

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.edit_message_text(text=text,
                                        chat_id=person_date[1],
                                        reply_markup=reply_markup,
                                        message_id=last_inlines[person_date[1]])


async def menu_12_get(update: Update, context: CallbackContext, con, cur, person_date, is_inline=False):
    if is_inline:
        change_tg_menu(person_date[1], 11, con, cur)
        await menu_11_take(update, context, con, cur, person_date, last_inlines[person_date[1]])
        return
    answer = update.message.text

    if answer.lower() == '–æ—Ç–º–µ–Ω–∞' or answer.lower() == '–Ω–∞–∑–∞–¥' or answer.lower() == '—Å—Ç–æ–ø':
        change_tg_menu(person_date[1], 3, con, cur)
        await menu_3_main_menu(update, context, con, cur, person_date)
        return
    new_name = answer

    try:
        inquiry = f"""UPDATE accounts
                SET name = '{new_name}'
                    WHERE tg_id = {person_date[1]}"""
        cur.execute(inquiry)
        con.commit()
    except Exception:
        new_name = person_date[2]

    if person_date[1] in last_inlines:
        await context.bot.edit_message_text(
            text=f'–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∫–∞–∫ "{new_name}"',
            chat_id=person_date[1],
            message_id=last_inlines[person_date[1]]
        )
    else:
        text = f'–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∫–∞–∫ "{new_name}"',
        await update.message.reply_text(text)

    change_tg_menu(person_date[1], 3, con, cur)
    await menu_3_main_menu(update, context, con, cur, person_date)


async def menu_13_take(update: Update, context: CallbackContext, con, cur, person_date):
    query = update.callback_query

    text = "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup)

    keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    message = await query.message.reply_text('üìû', reply_markup=reply_markup)
    to_del_messages[person_date[1]].append(message.message_id)


async def menu_13_get(update: Update, context: CallbackContext, con, cur, person_date, is_inline=False):
    if is_inline:
        await support_functions.delete_messages(update, context, to_del_messages[person_date[1]])
        change_tg_menu(person_date[1], 11, con, cur)
        await menu_11_take(update, context, con, cur, person_date, last_inlines[person_date[1]])
        return
    if update.message.contact or update.message.text.isdigit():
        try:
            if update.message.contact:
                phone_number = update.message.contact.phone_number
            else:
                phone_number = update.message.text
            inquiry = f"""UPDATE accounts
                SET phone_number = '{phone_number}'
                    WHERE tg_id = {person_date[1]}"""
            cur.execute(inquiry)
            con.commit()
            text = f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω, –∫–∞–∫ "{phone_number}"'

        except Exception:
            await update.message.reply_text('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.')
            change_tg_menu(person_date[1], 3, con, cur)
            await menu_3_main_menu(update, context, con, cur, person_date)
            return
    else:
        if update.message.text == '–û—Ç–º–µ–Ω–∞':
            text = '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.'
        else:
            return
    to_del_messages[person_date[1]].append(update.message.message_id)
    await support_functions.delete_messages(update, context, to_del_messages[person_date[1]])

    if person_date[1] in last_inlines:
        await context.bot.edit_message_text(
            text=text,
            chat_id=update.effective_chat.id,
            message_id=last_inlines[person_date[1]]
        )

    change_tg_menu(person_date[1], 3, con, cur)
    await menu_3_main_menu(update, context, con, cur, person_date)


async def menu_14_take(update: Update, context: CallbackContext, con, cur, person_date):
    text = "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º –∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ"
    keyboard = [
        [InlineKeyboardButton("–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ", url='https://github.com/PolkovnikovPavel')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

    change_tg_menu(person_date[1], 3, con, cur)
    await menu_3_main_menu(update, context, con, cur, person_date)


# ====================================================================================================


async def menu_3_main_menu(update: Update, context: CallbackContext, con, cur, person_date):
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."

    keyboard = [
        ['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º'],
        ['–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
        ['–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ'],
        ['–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)


async def client_button_handler(update: Update, context: CallbackContext, con, cur, person_date):
    if await check_is_baned(update, context, con, cur, person_date):
        return
    add_person_to_list(person_date[1])
    if person_date[4] == 11:
        await menu_11_get(update, context, con, cur, person_date)
    elif person_date[4] == 12:
        await menu_12_get(update, context, con, cur, person_date, True)
    elif person_date[4] == 13:
        await menu_13_get(update, context, con, cur, person_date, True)


async def client_text_message_handler(update: Update, context: CallbackContext, con, cur, person_date):
    if await check_is_baned(update, context, con, cur, person_date):
        return
    add_person_to_list(person_date[1])
    if person_date[4] == 1:
        await menu_1_get(update, context, con, cur, person_date)
    if person_date[4] == 2:
        await menu_2_get(update, context, con, cur, person_date)
    elif person_date[4] == 3:   # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if update.message.text == '–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é':
            await menu_11_take(update, context, con, cur, person_date)
            change_tg_menu(person_date[1], 11, con, cur)
        elif update.message.text == '–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            await menu_14_take(update, context, con, cur, person_date)
        else:
            await menu_3_main_menu(update, context, con, cur, person_date)

    elif person_date[4] == 12:
        await menu_12_get(update, context, con, cur, person_date, False)
    elif person_date[4] == 13:
        await menu_13_get(update, context, con, cur, person_date, False)


async def client_contact_handler(update: Update, context: CallbackContext, con, cur, person_date):
    if await check_is_baned(update, context, con, cur, person_date):
        return
    add_person_to_list(person_date[1])
    if person_date[4] == 2:
        await menu_2_get(update, context, con, cur, person_date)
    if person_date[4] == 13:
        await menu_13_get(update, context, con, cur, person_date, False)

